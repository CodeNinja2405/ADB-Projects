
Name: Ishaakh Ahamed Mohammed
Last 4 digits ID: 1001986153

CSE 6331, Cloud Computing					


Quiz Q3, Summer 2022   (c) DL, UTA, 2022


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 10. Show a web page and interface (which resides on the cloud provider) with your 
     Student ID at the top and below that, your name, at the top of every web page dispayed 
     (for this quiz). Please use a large font.


 There is a table of voting in presidential elections by year, state, number of votes cast and party votes cast for,

    Using a web interface (web page) allow a user to give a range of years (for example 2012 to 2016) as well as a range of votes
    (for example 2000 to 200000), and you will show:
    (a) all states, years, votes and parties cast for, within both of those ranges.
    (b) also show the largest and smallest vote entries (year, state, number votes, party) within those ranges


@app.route("/taskone" , methods=['GET','POST'])
def dispTable():
    yrange1 = str(request.args.get('yr1'))
    yrange2 = str(request.args.get('yr2'))
    vrange1 = str(request.args.get('vr1'))
    vrange2 = str(request.args.get('vr2'))

    # start_time=time.time()    

    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"   ;")
    rows = cursor.fetchall()

    #Max
    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"  ORDER BY votes DESC ;")
    maxi = cursor.fetchall()
    #Min
    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"  ORDER BY votes  ;")
    mini = cursor.fetchall()


    # end_time=time.time()
    # time_taken=end_time-start_time


    # print(timediff)
    return render_template('taskone.html', frows = rows, frows1 = maxi, frows2 = mini)



 11. (a) Allow a user to give a range of years, and for all votes in all states within that range, 
         calculate total votes (sum) for each candidate, for that state and list (similar to previous question).
     (b) Allow a user to give a number N (for example 6), and randomly select N of those years selected by part (a),
         and list. (Since the years are from 1976 to 2020, if you need to convert to a form 1,2, etc. You can 
         (take any year - 1976)/4 + 1. Or similar.)
    Please show the time to do those queries.


starttime = time()

    yrrange1 = str(request.args.get('r1'))
    yrrange2 = str(request.args.get('r2'))
    ntimes = str(request.args.get('nt'))


    # cursor.execute("Select * from volc JOIN volcin ON volc.Number=volcin.Number  where volcin.Sequence between "+range1+" and "+range2+" ; ")
    # cursor.execute("Select year, state, votes, party, SUM(party) from pvotes  where year between "+yrrange1+" and "+yrrange2+" GROUP BY party ")
    cursor.execute("Select party, SUM(votes) from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
    # cursor.execute("Select party, (SELECT SUM(votes) from pvotes GROUP BY PARTY)from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
    rows = cursor.fetchall()
    endtime = time()



    differencetime = endtime - starttime

    starttime1 = time()

    for i in range(20):
        cursor.execute("Select party, SUM(votes) from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
        rows1 = cursor.fetchall()

    endtime1 = time()
    differencetime1 = endtime1 - starttime1

    return render_template('tsaktwo.html', frows = rows, time = differencetime, frows1 = rows1, time1 = differencetime1)


 12. A user will give you the number of times to do the "query", you will do both of the previous questions that number of times 
     and show the results as well as the total time taken. 

    yrange1 = str(request.args.get('yr1'))
    yrange2 = str(request.args.get('yr2'))
    vrange1 = str(request.args.get('vr1'))
    vrange2 = str(request.args.get('vr2'))

    # start_time=time.time()    

    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"   ;")
    rows = cursor.fetchall()

    #Max
    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"  ORDER BY votes DESC ;")
    maxi = cursor.fetchall()
    #Min
    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"  ORDER BY votes  ;")
    mini = cursor.fetchall()


    # end_time=time.time()
    # time_taken=end_time-start_time



starttime = time()

    yrrange1 = str(request.args.get('r1'))
    yrrange2 = str(request.args.get('r2'))
    ntimes = str(request.args.get('nt'))


    # cursor.execute("Select * from volc JOIN volcin ON volc.Number=volcin.Number  where volcin.Sequence between "+range1+" and "+range2+" ; ")
    # cursor.execute("Select year, state, votes, party, SUM(party) from pvotes  where year between "+yrrange1+" and "+yrrange2+" GROUP BY party ")
    cursor.execute("Select party, SUM(votes) from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
    # cursor.execute("Select party, (SELECT SUM(votes) from pvotes GROUP BY PARTY)from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
    rows = cursor.fetchall()
    endtime = time()



    differencetime = endtime - starttime

    starttime1 = time()

    for i in range(20):
        cursor.execute("Select party, SUM(votes) from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
        rows1 = cursor.fetchall()

    endtime1 = time()
    differencetime1 = endtime1 - starttime1

    return render_template('tsakthree.html', frows = rows, time = differencetime, frows1 = rows1, time1 = differencetime1)



 13. Repeat the previous question using (in addition to the database) an in-memory caching mechanism 
     (NOT an in-memory database) then show us.

    starttime1 = time()
    yrange1 = str(request.args.get('yr1'))
    yrange2 = str(request.args.get('yr2'))
    vrange1 = str(request.args.get('vr1'))
    vrange2 = str(request.args.get('vr2'))

    # start_time=time.time()    

    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"   ;")
    rows = cursor.fetchall()

    #Max
    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"  ORDER BY votes DESC ;")
    maxi = cursor.fetchall()
    #Min
    cursor.execute("Select TOP 100 * from pvotes  where year between "+str(yrange1)+" and "+str(yrange2)+" and votes between "+str(vrange1)+" and "+str(vrange2)+"  ORDER BY votes  ;")
    mini = cursor.fetchall()


    # end_time=time.time()
    # time_taken=end_time-start_time



starttime = time()

    yrrange1 = str(request.args.get('r1'))
    yrrange2 = str(request.args.get('r2'))
    ntimes = str(request.args.get('nt'))


    # cursor.execute("Select * from volc JOIN volcin ON volc.Number=volcin.Number  where volcin.Sequence between "+range1+" and "+range2+" ; ")
    # cursor.execute("Select year, state, votes, party, SUM(party) from pvotes  where year between "+yrrange1+" and "+yrrange2+" GROUP BY party ")
    cursor.execute("Select party, SUM(votes) from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
    # cursor.execute("Select party, (SELECT SUM(votes) from pvotes GROUP BY PARTY)from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
    rows = cursor.fetchall()
    endtime = time()



    differencetime = endtime - starttime

    starttime1 = time()

    for i in range(20):
        cursor.execute("Select party, SUM(votes) from pvotes WHERE year >= "+str(yrrange1)+" and year <= "+str(yrrange2)+" GROUP BY PARTY;")
        rows1 = cursor.fetchall()

    endtime1 = time()
    differencetime1 = endtime1 - starttime1

    



hash = hashlib.sha224(query1.encode('utf-8')).hexdigest()
  key = "redis_cache:" + hash
  starttime=time()
  for i in range(int(getRandom)):
    if (r.get(key)):
      print("redis cached")
    else:
      print(key)
      print(r)
      cursor.execute(query1)
      rows = cursor.fetchall()
      
      
      
      fetchimpres = list(cursor.fetchall())
      r.set(key, pickle.dumps(list(fetchimpres)))
      r.expire(key, 36)

    dbcursor.execute(query1)
    rows = dbcursor.fetchall()

return render_template('tsakthree.html', frows = rows, time = differencetime, frows1 = rows1, time1 = differencetime1)

 14. Show us, in a link, the application running and we will try it out. Only for parts 10, 11, 12, 13

https://quiz3ixm6153.azurewebsites.net/withredis?sy=2012&ey=2016&sv=20000&ev=50000&fimprandomcount=100

 15. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

